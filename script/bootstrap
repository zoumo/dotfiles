#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ""
echo "                       _oo0oo_"
echo "                      o8888888o"
echo "                      88' . '88"
echo "                      (| -_- |)"
echo "                      0\  =  /0"
echo "                    ___/\`---'\\___"
echo "                  .' \\\\\\|     |# '."
echo "                 / \\\\\\|||  :  |||# \\"
echo "               / _||||| -:- |||||- \\"
echo "               |   | \\\\\\\\\\  -  #/ |   |"
echo "               | \\_|  ''\\---/''  |_/ |"
echo "               \\  .-\\__  '-'  ___/-. /"
echo "             ___'. .'  /--.--\\  \`. .'___"
echo "          .'' '<  \`.___\\_<|>_/___.' >' ''."
echo "         | | :  \`- \\\`.;\`\\ _ /\`;.\`/ - \` : | |"
echo "         \\  \\ \`_.   \\_ __\\ /__ _/   .-\` /  /"
echo "     =====\`-.____\`.___ \\_____/___.-\`___.-'====="
echo "                       \`=---='"
echo ""
echo "               佛祖保佑         永無BUG"
echo ""
echo "     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""
echo ""

info () {
    printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [[ "$overwrite_all" == "false" ]] && [[ "$backup_all" == "false" ]] && [[ "$skip_all" == "false" ]]
        then
            local currentSrc="$(readlink $dst)"

            if [[ "$currentSrc" == "$src" ]]
            then
                skip=true;
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac
            fi

        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [[ "$overwrite" == "true" ]]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [[ "$backup" == "true" ]]
        then
            mv "$dst" "${dst}.backup"
            success "moved $dst to ${dst}.backup"
        fi

        if [[ "$skip" == "true" ]]
        then
            success "skipped $src"
        fi
    fi

    if [[ "$skip" != "true" ]]  # "false" or empty
    then
        ln -s "$1" "$2"
        success "linked $1 to $2"
    fi
}

install_homebrew () {
    if ! command_exists brew; then
        echo "Installing Homebrew for you..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

install_centos () {
    # EPEL(http://fedoraproject.org/wiki/EPEL) 是由 Fedora 社区打造，
    # 为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。
    # 官方的源更新滞后, 有些拓展源没有
    sudo yum -y update
    sudo yum remove -y epel-release
    sudo yum install -y epel-release
    sudo yum install -y yum-axelget
    sudo yum install -y dconf git openssl-devel zsh gcc
    # chsh -s /bin/zsh
}

install_ohmyzsh () {
    if [[ ! -d ~/.oh-my-zsh ]]
    then
        info 'installing oh-my-zsh'
        # sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
        git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    fi
}

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false
    for src in $(find "$DOTFILES_ROOT/" -maxdepth 2 -name '*.symlink')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

# export OS
source system/os.sh
case "$OS" in
    osx)
        install_homebrew
    ;;
    centos)
        install_centos
    ;;
esac

install_ohmyzsh
install_dotfiles

info "installing dependencies"
if source script/dot
then
    success "dependencies installed"
else
    fail "error installing dependencies"
fi


success "==============="
success "All installed!"
success "==============="

TEST_CURRENT_SHELL=$(expr "$SHELL" : '.*/\(.*\)')
if [ "$TEST_CURRENT_SHELL" != "zsh" ]; then
    # If this platform provides a "chsh" command (not Cygwin), do it, man!
    if hash chsh >/dev/null 2>&1; then
        success "Time to change your default shell to zsh!"
        chsh -s $(grep /zsh$ /etc/shells | tail -1)
    # Else, suggest the user do so manually.
    else
        info "I can't change your shell automatically because this system does not have chsh."
        info "Please manually change your default shell to zsh!"
    fi
fi